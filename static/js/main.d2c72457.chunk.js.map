{"version":3,"sources":["WeatherInfo.js","Intro.js","App.js","serviceWorker.js","index.js"],"names":["WeatherInfo","props","results","country","icon","main","temp","class","console","log","className","name","src","flag","alt","Math","floor","Intro","App","state","loaded","language","city","image","handleInput","e","target","value","toLowerCase","setState","fetchCity","preventDefault","fetch","then","status","json","sys","hits","random","length","largeImageURL","alert","setTimeout","this","style","backgroundImage","action","type","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"yOAyBeA,EAvBK,SAAAC,GAClB,IAAIC,EAAUD,EAAMC,QAChBC,EAAUF,EAAME,QAChBC,EAAO,WACT,OAAIF,EAAQG,KAAKC,KAAO,QAAU,GACzB,uBAAGC,MAAM,4BACPL,EAAQG,KAAKC,KAAO,QAAU,EAChC,uBAAGC,MAAM,2BACJ,uBAAGA,MAAM,sBAGzB,OADAC,QAAQC,IAAIL,GAEV,yBAAKM,UAAU,WACb,2BACGR,EAAQS,KADX,IACiB,yBAAKC,IAAKT,EAAQU,KAAMC,IAAI,GAAGJ,UAAU,SAE1D,uBAAGA,UAAU,QACVK,KAAKC,MAAMd,EAAQG,KAAKC,KAAO,QADlC,QAC6CF,OCTpCa,EARD,WACZ,OACE,wBAAIP,UAAU,SAAd,cACa,qDCqGFQ,G,iNApGbC,MAAQ,CACNC,QAAQ,EACRC,SAAU,MACVC,KAAM,GACNnB,QAAS,GACTD,QAAS,GACTqB,MAAO,I,EAGTC,YAAc,SAAAC,GACZ,IAAIH,EAAOG,EAAEC,OAAOC,MAAMC,cAE1BpB,QAAQC,IAAIa,GACZ,EAAKO,SAAS,CACZP,U,EAIJQ,UAAY,SAAAL,GACVA,EAAEM,iBACFC,MAAM,qDAAD,OACkD,EAAKb,MAAMG,KAD7D,4CAEHW,MAAK,SAAA/B,GACL,GAAuB,MAAnBA,EAAQgC,OACV,OAAOhC,EACJiC,OAEAF,MAAK,SAAA/B,GACJ,EAAK2B,SAAS,CAAE3B,YAChB8B,MAAM,0CAAD,OACuC9B,EAAQkC,IAAIjC,QADnD,sBAGF8B,MAAK,SAAA/B,GACJ,OAAOA,EAAQiC,UAEhBF,MAAK,SAAA/B,GACJ,EAAK2B,SAAS,CAAE1B,QAASD,IACzB8B,MAAM,qEAAD,OACkE9B,EAAQS,KAD1E,kCAEHsB,MAAK,SAAA/B,GACL,OAAuB,MAAnBA,EAAQgC,OACHhC,EAAQiC,OAAOF,MAAK,SAAA/B,GACzBM,QAAQC,IAAIP,GACZ,EAAK2B,SAAS,CACZN,MACErB,EAAQmC,KACNtB,KAAKC,MAAMD,KAAKuB,SAAWpC,EAAQmC,KAAKE,SACxCC,mBAGI,cAInBC,MAAM,+BAGf,EAAKZ,SAAS,CACZP,KAAM,GACNnB,QAAS,GACTD,QAAS,M,mFAIQ,IAAD,OAClBwC,YAAW,kBAAM,EAAKb,SAAS,CAAET,QAAQ,MAAS,O,+BAIlDZ,QAAQC,IAAIkC,KAAKxB,MAAMjB,SACvBM,QAAQC,IAAIkC,KAAKxB,MAAMhB,SACvB,IAAIyC,EAAQ,CAAEC,gBAAgB,OAAD,OAASF,KAAKxB,MAAMI,MAApB,MAC7B,OAAOoB,KAAKxB,MAAMC,OAChB,yBAAKV,UAAU,MAAMkC,MAAOA,GAC1B,yBAAKlC,UAAU,YACf,0BAAMoC,OAAO,UACX,2BACEC,KAAK,OACLpB,MAAOgB,KAAKxB,MAAMG,KAClB0B,SAAUL,KAAKnB,cAEjB,4BAAQyB,QAASN,KAAKb,WACpB,uBAAGvB,MAAM,oBAGW,KAAvBoC,KAAKxB,MAAMjB,QACV,kBAAC,EAAD,CACEA,QAASyC,KAAKxB,MAAMjB,QACpBC,QAASwC,KAAKxB,MAAMhB,UAGtB,wBAAIO,UAAU,QAAd,qBAIJ,kBAAC,EAAD,U,GAhGYwC,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.d2c72457.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst WeatherInfo = props => {\r\n  let results = props.results;\r\n  let country = props.country;\r\n  let icon = () => {\r\n    if (results.main.temp - 272.15 >= 15) {\r\n      return <i class=\"fas fa-temperature-high\"></i>;\r\n    } else if (results.main.temp - 272.15 >= 0) {\r\n      return <i class=\"fas fa-temperature-low\"></i>;\r\n    } else return <i class=\"fas fa-snowflake\"></i>;\r\n  };\r\n  console.log(icon);\r\n  return (\r\n    <div className=\"results\">\r\n      <p>\r\n        {results.name} <img src={country.flag} alt=\"\" className=\"src\" />\r\n      </p>\r\n      <p className=\"temp\">\r\n        {Math.floor(results.main.temp - 272.15)}Â° {icon()}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherInfo;\r\n","import React from \"react\";\r\n\r\nconst Intro = () => {\r\n  return (\r\n    <h1 className=\"intro\">\r\n      WeatherApp <span>by NordVinterSkog</span>\r\n    </h1>\r\n  );\r\n};\r\n\r\nexport default Intro;\r\n","import React, { Component } from \"react\";\nimport WeatherInfo from \"./WeatherInfo\";\nimport Intro from \"./Intro\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    loaded: false,\n    language: \"eng\",\n    city: \"\",\n    country: \"\",\n    results: \"\",\n    image: \"\"\n  };\n\n  handleInput = e => {\n    let city = e.target.value.toLowerCase();\n\n    console.log(city);\n    this.setState({\n      city\n    });\n  };\n\n  fetchCity = e => {\n    e.preventDefault();\n    fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&appid=ea05aba774b348280020de52b353966f`\n    ).then(results => {\n      if (results.status === 200) {\n        return results\n          .json()\n\n          .then(results => {\n            this.setState({ results });\n            fetch(\n              `https://restcountries.eu/rest/v2/alpha/${results.sys.country}?fields=name;flag`\n            )\n              .then(results => {\n                return results.json();\n              })\n              .then(results => {\n                this.setState({ country: results });\n                fetch(\n                  `https://pixabay.com/api/?key=14976958-ee38bbe3e71cf647de563cf70&q=${results.name}&image_type=photo&pretty=true`\n                ).then(results => {\n                  if (results.status === 200) {\n                    return results.json().then(results => {\n                      console.log(results);\n                      this.setState({\n                        image:\n                          results.hits[\n                            Math.floor(Math.random() * results.hits.length)\n                          ].largeImageURL\n                      });\n                    });\n                  } else return null;\n                });\n              });\n          });\n      } else alert(\"No such city, try again!\");\n    });\n\n    this.setState({\n      city: \"\",\n      country: \"\",\n      results: \"\"\n    });\n  };\n\n  componentDidMount() {\n    setTimeout(() => this.setState({ loaded: true }), 2000);\n  }\n\n  render() {\n    console.log(this.state.results);\n    console.log(this.state.country);\n    let style = { backgroundImage: `url(${this.state.image})` };\n    return this.state.loaded ? (\n      <div className=\"app\" style={style}>\n        <div className=\"overlay\"></div>\n        <form action=\"submit\">\n          <input\n            type=\"text\"\n            value={this.state.city}\n            onChange={this.handleInput}\n          />\n          <button onClick={this.fetchCity}>\n            <i class=\"fas fa-search\"></i>\n          </button>\n        </form>\n        {this.state.results !== \"\" ? (\n          <WeatherInfo\n            results={this.state.results}\n            country={this.state.country}\n          />\n        ) : (\n          <h1 className=\"info\">Punch in a city!</h1>\n        )}\n      </div>\n    ) : (\n      <Intro />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}